# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java Deploy with Maven

on:
  push:
    branches: [ master ]
    tags: [release-v*]

jobs:
  compile:
    runs-on: ubuntu-latest
    name: Running Java ${{ matrix.java }} compile
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: 缓存 Maven 依赖
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: 编译代码
        run: mvn compile
      - name: Deploy the JAR file to the remote server
        uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Generate the package
        run: mvn -B package --file pom.xml -Dmaven.test.skip=true
      - name: 查看路径
        run: ls -al
      - name: SSH Server Deploy
        uses: easingthemes/ssh-deploy@v2.1.6
        with:
          SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_KEY }}
          ARGS: "-rltgoDzvO"
          REMOTE_HOST: ${{ secrets.HOST }}
          REMOTE_USER: ${{ secrets.USER }}
          SOURCE: target/challengeanswerservice-0.0.1-SNAPSHOT.jar
          TARGET: /home/ca/test
      - name: Deploy
        uses: appleboy/ssh-action@master # 使用ssh链接服务器
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          password: ${{ secrets.PWD }}
          port: ${{ secrets.PORT }}
          script: | # 执行命令（运行到服务器）cd：要确保服务器有这个目录； wget：下载上一步的release到服务器； tar：解压； 安装依赖；启动服务
            cd /home/ca/test
            nohup java -jar challengeanswerservice-0.0.1-SNAPSHOT.jar

#      - name: Push Docker
#        run: |
#          docker login --username=${{ secrets.USERNAME }} --password ${{ secrets.PASSWORD }} registry.cn-shanghai.aliyuncs.com
#          docker build . -t ${{ secrets.REGISTRY }}:$GITHUB_RUN_NUMBER
#          docker push ${{ secrets.REGISTRY }}:$GITHUB_RUN_NUMBER
#          docker tag $(docker images ${{ secrets.REGISTRY }}:$GITHUB_RUN_NUMBER -q) ${{ secrets.REGISTRY }}:latest
#          docker push ${{ secrets.REGISTRY }}:latest
#
#
#
#
#  pull-docker:
#    needs: [build]
#    name: Pull Docker
#    runs-on: ubuntu-latest
#    steps:
#      - name: Deploy
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USER }}
#          password: ${{ secrets.PWD }}
#          port: ${{ secrets.PORT }}
#          script: |
#            docker stop $(docker ps --filter ancestor=${{ secrets.REGISTRY }} -q)
#            docker rm -f $(docker ps -a --filter ancestor=${{ secrets.REGISTRY }}:latest -q)
#            docker rmi -f $(docker images  ${{ secrets.REGISTRY }}:latest -q)
#            docker login --username=${{ secrets.USERNAME }} --password ${{ secrets.PASSWORD }} registry.cn-shanghai.aliyuncs.com
#            docker pull ${{ secrets.REGISTRY }}:latest
#            docker run -d -p 8060:8060 ${{ secrets.REGISTRY }}:latest
## 上面暴露出了 8060端口, 填你项目端口即可 (没有端口可忽略)
#
#
#
